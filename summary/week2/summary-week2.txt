1、有效的字母异位解题思路：
有三种方法：①排序，排序之后再进行比较，时间复杂度：o(nlogn),空间复杂度，o(n)，因为字符不可变，需要额外的 O(n) 的空间来拷贝字符串
          ②用map统计源字符出现的次数，然后与目标字符进行比较，有相同字符则相应字符个数减1，当有字符个数小于0时，则不是字母异味词
            时间复杂度：o(n),空间复杂度：o(n);
          ③与方法1类似，只是辅助数组来解决，时间复杂度：o(n),空间复杂度：o(s),s为字符集的长度：26

2、两数之和
将target-num[i]放入map,再遍历数组num[i]是否存在于map中，如果存在则为目标值
时间复杂度为：o(n),空间复杂度为：o(n);

3、N 叉树的前序遍历
方法①递归，时间复杂度为o(n),空间复杂度为o(n),n为节点个数
方法②迭代，时间复杂度为o(n),空间复杂度为o(n),n为节点个数

4、字母异位词分组
方法①排序，先对字符串进行排序辅助map，排序后的字符串作为键，有相同排序后字符串的排序前字符串形成的列表作为值
     时间复杂度为O(nklogk),空间复杂度为O(nk),其中 n 是strs中的字符串的数量，k是strs 中的字符串的的最大长度
方法②辅助数组，先通过数组统计出字符出现次数，然后辅助map，用字符+出现次数的组合作为键，源字符串列表作为值
    时间复杂度为O(n(k+∣Σ∣))，空间复杂度为O(n(k+∣Σ∣))，其中∣Σ∣=26
方法③辅助map,与方法二类似，只是辅助map统计字符出现次数，然后辅助map，用字符+出现次数的组合作为键，源字符串列表作为值
    时间复杂度为O(n(k))，空间复杂度为O(n(k))

5、二叉树的中序遍历
方法①递归，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数
方法②迭代，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数

6、二叉树的前序遍历
方法①递归，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数
方法②迭代，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数

7、N 叉树的层序遍历
方法①递归，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数
方法②迭代，辅助队列，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数
方法③迭代，辅助列表，时间复杂度：o(n),空间复杂度：o(n),n为节点的个数

8、丑数
方法①最小堆，时间复杂度：o(nlogn),空间复杂度：o(n),n为节点个数
方法②动态规划，时间复杂度：o(n),空间复杂度o(n),n为节点个数

9、前 K 个高频元素
基于小根堆，先用map统计数组中元素出现频率，再将前K个高频元素放入小根堆中，过程中不断将频率最小的元素替换出来
时间复杂度：o(nlogk),空间复杂度：o(n),n为节点的个数

